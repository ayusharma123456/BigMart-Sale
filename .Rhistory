p12=ggplot(train)+geom_boxplot(aes(Item_Type,Item_Outlet_Sales),fill="red")+
ggtitle("Item_Type")
p13=ggplot(train)+geom_boxplot(aes( Item_Fat_Content,Item_Outlet_Sales),fill="green")+
ggtitle("Item_Fat_Content")
p14=ggplot(train)+geom_boxplot(aes(Outlet_Identifier,Item_Outlet_Sales),fill="red")+
ggtitle("Outlet_Identifier")
second_row_3 = plot_grid(p13,p14,ncol = 2)
plot_grid(p12,second_row_2,nrow = 2)
ggplot(train)+geom_boxplot(aes(Outlet_Size,Item_Outlet_Sales),fill="red")+
theme(axis.text.x= element_text(size = 8.5))+
ggtitle("Outlet_Size")
p15=ggplot(train)+geom_boxplot(aes(Outlet_Location_Type,Item_Outlet_Sales),fill="red")+
ggtitle("Outlet_Location_Type")
p16=ggplot(train)+geom_boxplot(aes(Outlet_Type,Item_Outlet_Sales),fill="red")+
ggtitle("Outlet_Type")
plot_grid(p15,p16,ncol = 1)
###########function for missing values in variables
sum(is.na(comb$Item_Weight))
sum(is.na(comb$Item_Outlet_Sales))
#using mean to replace the missing values in item weight(continous variable)
comb$Item_Weight[is.na(comb$Item_Weight)] <- mean(comb$Item_Weight, na.rm =
TRUE)
sum(is.na(comb$Item_Weight))
#in this the Item_Visibility has the number of 0 values so we first convert it into na
#then apply mean to the na
ggplot(comb)+geom_histogram(aes(Item_Visibility),binwidth = 0.005,fill="blue")
comb$Item_Visibility[comb$Item_Visibility == 0.000000000
] <- NA
sum(is.na(comb$Item_Visibility))
comb$Item_Visibility[is.na(comb$Item_Visibility)] <- mean(comb$Item_Visibility, na.rm =
TRUE)
ggplot(comb)+geom_histogram(aes(Item_Visibility),binwidth = 0.005,fill="blue")
View(comb)
ggplot(comb)+geom_histogram(aes(Item_Weight),binwidth = 1,fill="blue")
######creating new variable for model performance (feature engineering)
perishable = c("Breads","Breakfast","Dairy","Fruits and Vegetables","Meat","Seafood")
non_perishable = c("Baking Goods","Canned","Frozen Foods","Hard Drinks","
Health and Hygiene","Household","Soft Drinks")
comb[,Item_Type_new := ifelse(Item_Type %in% perishable, "perishable" , ifelse(Item_Type %in% non_perishable, "non_perishable","not sure"))]
table(comb$Item_Type,substr(comb$Item_Identifier,1,2))
comb[,Item_cateory := substr(comb$Item_Identifier,1,2)]
comb$Item_Fat_Content[comb$Item_cateory == "NC"] = "non-Edible"
comb[,Outlet_Year := 2013 - Outlet_Establishment_Year]
comb$Outlet_Establishment_Year = as.factor(comb$Outlet_Establishment_Year)
comb[,price_per_weight := Item_MRP/Item_Weight]
ggplot(comb)+geom_histogram(aes(price_per_weight),binwidth = 1,fill="blue")#price_per_weight
comb[,Item_Mrp_cluster :=
ifelse(Item_MRP < 69,"1st",
ifelse(Item_MRP >= 69 & Item_MRP < 136,"2nd",
ifelse(Item_MRP >= 136 & Item_MRP < 203,"3rd","4th")))
]
comb[,Outlet_Size_num := ifelse(Outlet_Size == "Small",0, ifelse(Outlet_Size == "Medium",1,2))]
comb[,Outlet_Location_Type_num := ifelse(Outlet_Location_Type == "Tier 3",0,ifelse(Outlet_Location_Type == "Tier 2",1,2))]
comb[,c("Outlet_Size","Outlet_Location_Type"):= NULL]
oh = dummyVars("~.",data = comb[,-c("Item_Identifier","Outlet_Establishment_Year","Item_Type")],fullRank = T)
ho = data.table(predict(oh,comb[,-c("Item_Identifier","Outlet_Establishment_Year","Item_Type")]))
comb = cbind(comb[,"Item_Identifier"],ho)
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
comb[,price_per_weight := log(price_per_weight + 1)]
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
comb[,price_per_weight := log(price_per_weight + 1)]
ggplot(comb)+geom_histogram(aes(Item_Visibility),binwidth = 0.005,fill="blue")
ggplot(comb)+geom_histogram(aes(price_per_weight),binwidth = 1,fill="blue")#price_per_weight
ggplot(comb)+geom_histogram(aes(Item_Visibility),binwidth = 0.005,fill="blue")
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
ggplot(comb)+geom_histogram(aes(Item_Visibility),binwidth = 0.005,fill="blue")
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
ggplot(comb)+geom_histogram(aes(Item_Visibility),binwidth = 0.005,fill="blue")
train = comb[1:nrow(train)]
test = comb[(nrow(train) + 1):nrow(comb)]
train[,Item_Outlet_Sales := NULL]#removing the na values for test
View(train)
View(test)
setwd("D:/BA classes/big market sale predication")
getwd()
library(data.table)#used for reading and manipulation of data
library(dplyr)#used for data manipulation and joining of data
library(ggplot2)#used for plotting
library(caret)#used for modeling
library(corrplot)#used for correlation
library(xgboost)#used for xgboost model
library(cowplot)#combing mutiple plots
#using the fread function to read the data file
#train contain the target value item_outlet_sales
train = fread("train.csv")
#no target value which is used by the build up model to predict
test = fread("test.csv")
submission = fread("sample_submission.csv")
#demension of the data
dim(train)
dim(test)
str(train)
test[,Item_Outlet_Sales := NA]
comb = rbind(train,test)#combing the train and test to to perform bivariate analysis
dim(comb)
###univariate analysis
#target variable
ggplot(train)+geom_histogram(aes(train$Item_Outlet_Sales),binwidth = 100,fill="green")+xlab("Item_Outlet_Sales")
#target vairable is rightward skewd in it
#independent variable numerical
p1=ggplot(comb)+geom_histogram(aes(Item_Weight),binwidth = 1,fill="blue")
p2=ggplot(comb)+geom_histogram(aes(Item_Visibility),binwidth = 0.005,fill="blue")
p3=ggplot(comb)+geom_histogram(aes(Item_MRP),binwidth = 1,fill="blue")
plot_grid(p1,p2,p3,nrow=1)#plot_grid from cowplot package
ggplot(comb)+geom_histogram(aes(price_per_weight),binwidth = 1,fill="blue")#price_per_weight
#independent variable categorial
#plot of Item_Fat_Content
ggplot(comb %>% group_by(Item_Fat_Content) %>% summarise(Count = n()))+
geom_bar(aes(Item_Fat_Content,Count) , stat = "identity", fill="green")
#in the plot lf= low fat and reg= regular
comb$Item_Fat_Content[comb$Item_Fat_Content == "LF"] = "Low Fat"
comb$Item_Fat_Content[comb$Item_Fat_Content == "low fat"] = "Low Fat"
comb$Item_Fat_Content[comb$Item_Fat_Content == "reg"] = "Regular"
ggplot(comb %>% group_by(Item_Fat_Content) %>% summarise(Count = n()))+
geom_bar(aes(Item_Fat_Content,Count) , stat = "identity", fill="green")
#plot of item_type
p4 = ggplot(comb %>% group_by(Item_Type) %>% summarise(Count = n())) +
geom_bar(aes(Item_Type,Count),stat = "identity",fill="red") + xlab("") +
geom_label(aes(Item_Type,Count,label= Count),vjust=0.5) + theme(axis.text.x= element_text(angle = 45,hjust = 1))+
ggtitle("Item_Type")
#plot of outlet indenfier
p5 = ggplot(comb %>% group_by(Outlet_Identifier) %>% summarise(Count = n())) +
geom_bar(aes(Outlet_Identifier,Count),stat = "identity",fill="red") +
geom_label(aes(Outlet_Identifier,Count,label= Count),vjust=0.5) + theme(axis.text.x= element_text(angle = 45,hjust = 1))+
ggtitle("Outlet_Identifier")
#plot of oulet size
p6 = ggplot(comb %>% group_by(Outlet_Size) %>% summarise(Count = n())) +
geom_bar(aes(Outlet_Size,Count),stat = "identity",fill="red")  +
geom_label(aes(Outlet_Size,Count,label= Count),vjust=0.5) + theme(axis.text.x= element_text(angle = 45,hjust = 1))+
ggtitle("Outlet_Size")
second_row = plot_grid(p5, p6, nrow = 1)
plot_grid(p4, second_row, ncol = 1)
#plot outlet_establishment
p7 = ggplot(comb %>% group_by(Outlet_Establishment_Year) %>% summarise(Count = n())) +
geom_bar(aes(factor(Outlet_Establishment_Year),Count),stat = "identity",fill="red")  +
geom_label(aes(factor(Outlet_Establishment_Year),Count,label= Count),vjust=0.5) + theme(axis.text.x= element_text(size = 8.5))+
ggtitle("Outlet_Establishment_Year")
#plot outlet_type
p8 = ggplot(comb %>% group_by(Outlet_Type) %>% summarise(Count = n())) +
geom_bar(aes(Outlet_Type,Count),stat = "identity",fill="red")  +
geom_label(aes(factor(Outlet_Type),Count,label= Count),vjust=0.5) + theme(axis.text.x= element_text(size = 8.5))+
ggtitle("Outlet_type")
plot_grid(p7,p8, ncol = 2)
########Bivariate analysis
train=comb[1:nrow(train)]#
############ plot relationship target variable and independent variable numerical
p9=ggplot(train)+ geom_point(aes(Item_Weight, Item_Outlet_Sales),colour="green",alpha=0.3)+
ggtitle("Item_Weight")
p10=ggplot(train)+ geom_point(aes(Item_Visibility , Item_Outlet_Sales),colour="red",alpha=0.3)+
ggtitle("Item_Visibility")
p11=ggplot(train)+ geom_point(aes(Item_MRP, Item_Outlet_Sales),colour="green",alpha=0.3)+
ggtitle("Item_MRP")
second_row_2 = plot_grid(p10,p11,ncol = 2)
plot_grid(p9,second_row_2,nrow = 2)
###########relationship target variable and independent variable categorial
p12=ggplot(train)+geom_boxplot(aes(Item_Type,Item_Outlet_Sales),fill="red")+
ggtitle("Item_Type")
p13=ggplot(train)+geom_boxplot(aes( Item_Fat_Content,Item_Outlet_Sales),fill="green")+
ggtitle("Item_Fat_Content")
p14=ggplot(train)+geom_boxplot(aes(Outlet_Identifier,Item_Outlet_Sales),fill="red")+
ggtitle("Outlet_Identifier")
second_row_3 = plot_grid(p13,p14,ncol = 2)
plot_grid(p12,second_row_2,nrow = 2)
ggplot(train)+geom_boxplot(aes(Outlet_Size,Item_Outlet_Sales),fill="red")+
theme(axis.text.x= element_text(size = 8.5))+
ggtitle("Outlet_Size")
p15=ggplot(train)+geom_boxplot(aes(Outlet_Location_Type,Item_Outlet_Sales),fill="red")+
ggtitle("Outlet_Location_Type")
p16=ggplot(train)+geom_boxplot(aes(Outlet_Type,Item_Outlet_Sales),fill="red")+
ggtitle("Outlet_Type")
plot_grid(p15,p16,ncol = 1)
###########function for missing values in variables
sum(is.na(comb$Item_Weight))
sum(is.na(comb$Item_Outlet_Sales))
#using mean to replace the missing values in item weight(continous variable)
comb$Item_Weight[is.na(comb$Item_Weight)] <- mean(comb$Item_Weight, na.rm =
TRUE)
ggplot(comb)+geom_histogram(aes(Item_Weight),binwidth = 1,fill="blue")
sum(is.na(comb$Item_Weight))
#in this the Item_Visibility has the number of 0 values so we first convert it into na
#then apply mean to the na
ggplot(comb)+geom_histogram(aes(Item_Visibility),binwidth = 0.005,fill="blue")
comb$Item_Visibility[comb$Item_Visibility == 0.000000000
] <- NA
sum(is.na(comb$Item_Visibility))
comb$Item_Visibility[is.na(comb$Item_Visibility)] <- mean(comb$Item_Visibility, na.rm =
TRUE)
ggplot(comb)+geom_histogram(aes(Item_Visibility),binwidth = 0.005,fill="blue")
######creating new variable for model performance (feature engineering)
perishable = c("Breads","Breakfast","Dairy","Fruits and Vegetables","Meat","Seafood")
non_perishable = c("Baking Goods","Canned","Frozen Foods","Hard Drinks","
Health and Hygiene","Household","Soft Drinks")
#Item_Type_new variable
comb[,Item_Type_new := ifelse(Item_Type %in% perishable, "perishable" , ifelse(Item_Type %in% non_perishable, "non_perishable","not sure"))]
#comparing the two variable Item_type and item_identifier
table(comb$Item_Type,substr(comb$Item_Identifier,1,2))
#item_category new variable
comb[,Item_cateory := substr(comb$Item_Identifier,1,2)]
#changing the values of fat content wherever item category NC (no fat content)
comb$Item_Fat_Content[comb$Item_cateory == "NC"] = "non-Edible"
#year of operation for outlets
comb[,Outlet_Year := 2013 - Outlet_Establishment_Year]
comb$Outlet_Establishment_Year = as.factor(comb$Outlet_Establishment_Year)
#price per weight
comb[,price_per_weight := Item_MRP/Item_Weight]
ggplot(comb)+geom_histogram(aes(price_per_weight),binwidth = 1,fill="blue")#price_per_weight
#new ind variable item _Mrp_cluster
comb[,Item_Mrp_cluster :=
ifelse(Item_MRP < 69,"1st",
ifelse(Item_MRP >= 69 & Item_MRP < 136,"2nd",
ifelse(Item_MRP >= 136 & Item_MRP < 203,"3rd","4th")))
]
#########converting categorial to numerical
#label encoding(ordinal variables)
comb[,Outlet_Size_num := ifelse(Outlet_Size == "Small",0, ifelse(Outlet_Size == "Medium",1,2))]
comb[,Outlet_Location_Type_num := ifelse(Outlet_Location_Type == "Tier 3",0,ifelse(Outlet_Location_Type == "Tier 2",1,2))]
#removing categorial variable
comb[,c("Outlet_Size","Outlet_Location_Type"):= NULL]
#one hot encoding 0 & 1
oh = dummyVars("~.",data = comb[,-c("Item_Identifier","Outlet_Establishment_Year","Item_Type")],fullRank = T)
ho = data.table(predict(oh,comb[,-c("Item_Identifier","Outlet_Establishment_Year","Item_Type")]))
comb = cbind(comb[,"Item_Identifier"],ho)
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
ggplot(comb)+geom_histogram(aes(Item_Visibility),binwidth = 0.005,fill="blue")
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
ggplot(comb)+geom_histogram(aes(Item_Visibility),binwidth = 0.005,fill="blue")
comb[,price_per_weight := log(price_per_weight + 1)]
ggplot(comb)+geom_histogram(aes(price_per_weight),binwidth = 1,fill="blue")#price_per_weight
#######splitting of data into train and test
train = comb[1:nrow(train)]
test = comb[(nrow(train) + 1):nrow(comb)]
test[,Item_Outlet_Sales := NULL]#removing the na values for test
View(train)
View(test)
cor_train = cor(train[,-c("Item_Identifier")])
corrplot(cor_train,method = "pie",type = "lower",tl.cex = 0.9)
#there is multicorrelated between price_per_weight and item weight same with item_mrp
linear_reg = lm(Item_Outlet_Sales ~ ., data = train[,-c("Item_Identifier")])
submission$Item_Outlet_Sales = predict(linear_reg,test[,-c("Item_Identifier")])
set.seed(12345)
my_control = trainControl(method = "cv",number= 5)#cross valadition
Grid=expand.grid(alpha=1,lambda= seq(0.001, 0.1, by = 0.0002))
lasso_regression = train(x = train[,-c("Item_Identifier","Item_Outlet_Sales")],y = train$Item_Outlet_Sales,
method ='glmnet',trControl=my_control, tuneGrid=Grid)
submission$Item_Outlet_Sales = predict(lasso_regression,test[,-c("Item_Identifier")])
set.seed(1235)
my_control = trainControl(method = "cv",number= 5)#cross valadition
Grid=expand.grid(alpha=1,lambda= seq(0.001, 0.1, by = 0.0002))
lasso_regression = train(x = train[,-c("Item_Identifier","Item_Outlet_Sales")],y = train$Item_Outlet_Sales,
method ='glmnet',trControl=my_control, tuneGrid=Grid)
set.seed(1236)
my_control = trainControl(method = "cv",number= 5)#cross valadition
Grid=expand.grid(alpha=0,lambda= seq(0.001, 0.1, by = 0.0002))
ridge_regression = train(x = train[,-c("Item_Identifier","Item_Outlet_Sales")],y = train$Item_Outlet_Sales,
method ='glmnet',trControl=my_control, tuneGrid=Grid)
submission$Item_Outlet_Sales = predict(ridge_regression,test[,-c("Item_Identifier")])
elastic_regression = train(x = train[,-c("Item_Identifier","Item_Outlet_Sales")],y = train$Item_Outlet_Sales,
method ='glmnet',trControl=my_control, tuneGrid=Grid)
submission$Item_Outlet_Sales = predict(elastic_regression,test[,-c("Item_Identifier")])
View(submission)
model_list<-list(linear=linear_reg,ridge=ridge_regression,lasso=lasso_regression,elastic=elastic_regression)
res<-resamples(model_list)
summary(res)
model_list<-list(linear_reg,ridge_regression,lasso_regression,elastic_regression)
res<-resamples(model_list)
anova(linear_reg,ridge_regression,lasso_regression,elastic_regression)
summary(linear_reg)
summary(linear_reg)
summary(ridge_regression)
summary(lasso_regression)
summary(elastic_regression)
predictions_train <- predict(ridge_regression, s = optimal_lambda, newx = x)
eval_results <- function(true, predicted, df) {
SSE <- sum((predicted - true)^2)
SST <- sum((true - mean(true))^2)
R_square <- 1 - SSE / SST
RMSE = sqrt(SSE/nrow(df))
# Model performance metrics
data.frame(
RMSE = RMSE,
Rsquare = R_square
)
}
eval_results(train$Item_Outlet_Sales, predictions_train, train[,-c("Item_Identifier")])
predictions_train <- predict(lasso_regression, s = optimal_lambda, newx = x)
eval_results(train$Item_Outlet_Sales, predictions_train, train[,-c("Item_Identifier")])
predictions_train <- predict(elastic_regression, s = optimal_lambda, newx = x)
eval_results(train$Item_Outlet_Sales, predictions_train, train[,-c("Item_Identifier")])
set.seed(1238)
my_control = trainControl(method = "cv" , number = 5)
tgrid = expand.grid(.mtry = c(3:10),.splitrule = "variance",.min.node.size = c(10,15,20))
random_model = train(x=train[,-c("Item_identifier","Item_Outlet_Sales")],y=train$Item_Outlet_Sales,
method ="ranger",trControl= my_control,tuneGrid=tgrid,num.trees=400,importance="permutation")
predictions_train <- predict(random_model, s = optimal_lambda, newx = x)
eval_results(train$Item_Outlet_Sales, predictions_train, train[,-c("Item_Identifier")])
plot(random_model)
param_list = list( objective = "reg:linear",eta =0.01, gamma=1,max_depth=6,subsample=0.8,colsample_bytree=0.5)
dtrain = xgb.DMatrix(data = as.matrix(train[,-c("Item_Identifier","Item_Outlet_Sales")]),
label = train$Item_Outlet_Sales) dtest = xgb.DMatrix(data = as.matrix(test[,-c("Item_Identifier")]))
dtrain = xgb.DMatrix(data = as.matrix(train[,-c("Item_Identifier","Item_Outlet_Sales")]),label = train$Item_Outlet_Sales)
dtest = xgb.DMatrix(data = as.matrix(test[,-c("Item_Identifier")]))
set.seed(111)
xgbcv = xgb.cv(params = param_list , data = dtrain ,nrounds = 1000 , nfold = 5 ,print_every_n = 10,
early_stopping_rounds = 30 , maximize = F)
xgb_model = xgb_model(data = dtrain , params = param_list , nrounds = 452)
xgb_model = xgb.train(data = dtrain , params = param_list , nrounds = 452)
setwd("D:/BA classes/big market sale predication")
getwd()
library(data.table)#used for reading and manipulation of data
library(dplyr)#used for data manipulation and joining of data
library(ggplot2)#used for plotting
library(caret)#used for modeling
library(corrplot)#used for correlation
library(xgboost)#used for xgboost model
library(cowplot)#combing mutiple plots
#using the fread function to read the data file
#train contain the target value item_outlet_sales
train = fread("train.csv")
#no target value which is used by the build up model to predict
test = fread("test.csv")
submission = fread("sample_submission.csv")
#demension of the data
dim(train)
dim(test)
str(train)
test[,Item_Outlet_Sales := NA]
comb = rbind(train,test)#combing the train and test to to perform bivariate analysis
dim(comb)
###univariate analysis
#target variable
ggplot(train)+geom_histogram(aes(train$Item_Outlet_Sales),binwidth = 100,fill="green")+xlab("Item_Outlet_Sales")
#target vairable is rightward skewd in it
#independent variable numerical
p1=ggplot(comb)+geom_histogram(aes(Item_Weight),binwidth = 1,fill="blue")
p2=ggplot(comb)+geom_histogram(aes(Item_Visibility),binwidth = 0.005,fill="blue")
p3=ggplot(comb)+geom_histogram(aes(Item_MRP),binwidth = 1,fill="blue")
plot_grid(p1,p2,p3,nrow=1)#plot_grid from cowplot package
ggplot(comb)+geom_histogram(aes(price_per_weight),binwidth = 1,fill="blue")#price_per_weight
#independent variable categorial
#plot of Item_Fat_Content
ggplot(comb %>% group_by(Item_Fat_Content) %>% summarise(Count = n()))+
geom_bar(aes(Item_Fat_Content,Count) , stat = "identity", fill="green")
#in the plot lf= low fat and reg= regular
comb$Item_Fat_Content[comb$Item_Fat_Content == "LF"] = "Low Fat"
comb$Item_Fat_Content[comb$Item_Fat_Content == "low fat"] = "Low Fat"
comb$Item_Fat_Content[comb$Item_Fat_Content == "reg"] = "Regular"
ggplot(comb %>% group_by(Item_Fat_Content) %>% summarise(Count = n()))+
geom_bar(aes(Item_Fat_Content,Count) , stat = "identity", fill="green")
#plot of item_type
p4 = ggplot(comb %>% group_by(Item_Type) %>% summarise(Count = n())) +
geom_bar(aes(Item_Type,Count),stat = "identity",fill="red") + xlab("") +
geom_label(aes(Item_Type,Count,label= Count),vjust=0.5) + theme(axis.text.x= element_text(angle = 45,hjust = 1))+
ggtitle("Item_Type")
#plot of outlet indenfier
p5 = ggplot(comb %>% group_by(Outlet_Identifier) %>% summarise(Count = n())) +
geom_bar(aes(Outlet_Identifier,Count),stat = "identity",fill="red") +
geom_label(aes(Outlet_Identifier,Count,label= Count),vjust=0.5) + theme(axis.text.x= element_text(angle = 45,hjust = 1))+
ggtitle("Outlet_Identifier")
#plot of oulet size
p6 = ggplot(comb %>% group_by(Outlet_Size) %>% summarise(Count = n())) +
geom_bar(aes(Outlet_Size,Count),stat = "identity",fill="red")  +
geom_label(aes(Outlet_Size,Count,label= Count),vjust=0.5) + theme(axis.text.x= element_text(angle = 45,hjust = 1))+
ggtitle("Outlet_Size")
second_row = plot_grid(p5, p6, nrow = 1)
plot_grid(p4, second_row, ncol = 1)
#plot outlet_establishment
p7 = ggplot(comb %>% group_by(Outlet_Establishment_Year) %>% summarise(Count = n())) +
geom_bar(aes(factor(Outlet_Establishment_Year),Count),stat = "identity",fill="red")  +
geom_label(aes(factor(Outlet_Establishment_Year),Count,label= Count),vjust=0.5) + theme(axis.text.x= element_text(size = 8.5))+
ggtitle("Outlet_Establishment_Year")
#plot outlet_type
p8 = ggplot(comb %>% group_by(Outlet_Type) %>% summarise(Count = n())) +
geom_bar(aes(Outlet_Type,Count),stat = "identity",fill="red")  +
geom_label(aes(factor(Outlet_Type),Count,label= Count),vjust=0.5) + theme(axis.text.x= element_text(size = 8.5))+
ggtitle("Outlet_type")
plot_grid(p7,p8, ncol = 2)
########Bivariate analysis
train=comb[1:nrow(train)]#
############ plot relationship target variable and independent variable numerical
p9=ggplot(train)+ geom_point(aes(Item_Weight, Item_Outlet_Sales),colour="green",alpha=0.3)+
ggtitle("Item_Weight")
p10=ggplot(train)+ geom_point(aes(Item_Visibility , Item_Outlet_Sales),colour="red",alpha=0.3)+
ggtitle("Item_Visibility")
p11=ggplot(train)+ geom_point(aes(Item_MRP, Item_Outlet_Sales),colour="green",alpha=0.3)+
ggtitle("Item_MRP")
second_row_2 = plot_grid(p10,p11,ncol = 2)
plot_grid(p9,second_row_2,nrow = 2)
###########relationship target variable and independent variable categorial
p12=ggplot(train)+geom_boxplot(aes(Item_Type,Item_Outlet_Sales),fill="red")+
ggtitle("Item_Type")
p13=ggplot(train)+geom_boxplot(aes( Item_Fat_Content,Item_Outlet_Sales),fill="green")+
ggtitle("Item_Fat_Content")
p14=ggplot(train)+geom_boxplot(aes(Outlet_Identifier,Item_Outlet_Sales),fill="red")+
ggtitle("Outlet_Identifier")
second_row_3 = plot_grid(p13,p14,ncol = 2)
plot_grid(p12,second_row_2,nrow = 2)
ggplot(train)+geom_boxplot(aes(Outlet_Size,Item_Outlet_Sales),fill="red")+
theme(axis.text.x= element_text(size = 8.5))+
ggtitle("Outlet_Size")
p15=ggplot(train)+geom_boxplot(aes(Outlet_Location_Type,Item_Outlet_Sales),fill="red")+
ggtitle("Outlet_Location_Type")
p16=ggplot(train)+geom_boxplot(aes(Outlet_Type,Item_Outlet_Sales),fill="red")+
ggtitle("Outlet_Type")
plot_grid(p15,p16,ncol = 1)
###########function for missing values in variables
sum(is.na(comb$Item_Weight))
sum(is.na(comb$Item_Outlet_Sales))
#using mean to replace the missing values in item weight(continous variable)
comb$Item_Weight[is.na(comb$Item_Weight)] <- mean(comb$Item_Weight, na.rm =
TRUE)
ggplot(comb)+geom_histogram(aes(Item_Weight),binwidth = 1,fill="blue")
sum(is.na(comb$Item_Weight))
#in this the Item_Visibility has the number of 0 values so we first convert it into na
#then apply mean to the na
ggplot(comb)+geom_histogram(aes(Item_Visibility),binwidth = 0.005,fill="blue")
comb$Item_Visibility[comb$Item_Visibility == 0.000000000
] <- NA
sum(is.na(comb$Item_Visibility))
comb$Item_Visibility[is.na(comb$Item_Visibility)] <- mean(comb$Item_Visibility, na.rm =
TRUE)
ggplot(comb)+geom_histogram(aes(Item_Visibility),binwidth = 0.005,fill="blue")
######creating new variable for model performance (feature engineering)
perishable = c("Breads","Breakfast","Dairy","Fruits and Vegetables","Meat","Seafood")
non_perishable = c("Baking Goods","Canned","Frozen Foods","Hard Drinks","
Health and Hygiene","Household","Soft Drinks")
#Item_Type_new variable
comb[,Item_Type_new := ifelse(Item_Type %in% perishable, "perishable" , ifelse(Item_Type %in% non_perishable, "non_perishable","not sure"))]
#comparing the two variable Item_type and item_identifier
table(comb$Item_Type,substr(comb$Item_Identifier,1,2))
#item_category new variable
comb[,Item_cateory := substr(comb$Item_Identifier,1,2)]
#changing the values of fat content wherever item category NC (no fat content)
comb$Item_Fat_Content[comb$Item_cateory == "NC"] = "non-Edible"
#year of operation for outlets
comb[,Outlet_Year := 2013 - Outlet_Establishment_Year]
comb$Outlet_Establishment_Year = as.factor(comb$Outlet_Establishment_Year)
#price per weight
comb[,price_per_weight := Item_MRP/Item_Weight]
ggplot(comb)+geom_histogram(aes(price_per_weight),binwidth = 1,fill="blue")#price_per_weight
#new ind variable item _Mrp_cluster
comb[,Item_Mrp_cluster :=
ifelse(Item_MRP < 69,"1st",
ifelse(Item_MRP >= 69 & Item_MRP < 136,"2nd",
ifelse(Item_MRP >= 136 & Item_MRP < 203,"3rd","4th")))
]
#########converting categorial to numerical
#label encoding(ordinal variables)
comb[,Outlet_Size_num := ifelse(Outlet_Size == "Small",0, ifelse(Outlet_Size == "Medium",1,2))]
comb[,Outlet_Location_Type_num := ifelse(Outlet_Location_Type == "Tier 3",0,ifelse(Outlet_Location_Type == "Tier 2",1,2))]
#removing categorial variable
comb[,c("Outlet_Size","Outlet_Location_Type"):= NULL]
#one hot encoding 0 & 1
oh = dummyVars("~.",data = comb[,-c("Item_Identifier","Outlet_Establishment_Year","Item_Type")],fullRank = T)
ho = data.table(predict(oh,comb[,-c("Item_Identifier","Outlet_Establishment_Year","Item_Type")]))
comb = cbind(comb[,"Item_Identifier"],ho)
########removing the skewness
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
ggplot(comb)+geom_histogram(aes(Item_Visibility),binwidth = 0.005,fill="blue")
comb[,price_per_weight := log(price_per_weight + 1)]
ggplot(comb)+geom_histogram(aes(price_per_weight),binwidth = 1,fill="blue")#price_per_weight
#######splitting of data into train and test
train = comb[1:nrow(train)]
test = comb[(nrow(train) + 1):nrow(comb)]
test[,Item_Outlet_Sales := NULL]#removing the na values for test
######correlated variables
cor_train = cor(train[,-c("Item_Identifier")])
corrplot(cor_train,method = "pie",type = "lower",tl.cex = 0.9)
#there is multicorrelated between price_per_weight and item weight same with item_mrp
train[,Item_Outlet_Sales := log(Item_Outlet_Sales + 1)]
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
ggplot(comb)+geom_histogram(aes(Item_Visibility),binwidth = 0.005,fill="blue")
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
comb[,Item_Visibility := log(Item_Visibility + 1)] #log+1 avoid the dvision by zero
ggplot(comb)+geom_histogram(aes(Item_Visibility),binwidth = 0.005,fill="blue")
###Xboost model
param_list = list( objective = "reg:linear",eta =0.01, gamma=1,max_depth=6,subsample=0.8,colsample_bytree=0.5)
dtrain = xgb.DMatrix(data = as.matrix(train[,-c("Item_Identifier","Item_Outlet_Sales")]),label = train$Item_Outlet_Sales)
dtest = xgb.DMatrix(data = as.matrix(test[,-c("Item_Identifier")]))
#cross validation
set.seed(111)
xgbcv = xgb.cv(params = param_list , data = dtrain ,nrounds = 1000 , nfold = 5 ,print_every_n = 10,
early_stopping_rounds = 30 , maximize = F)
xgb_model = xgb.train(data = dtrain , params = param_list , nrounds = 452)
xgb_model = xgb.train(data = dtrain , params = param_list , nrounds = 664)
submission$Item_Outlet_Sales = predict(xgb_model,test[,-c("Item_Identifier")])
submission = fread("sample_submission.csv")
submission$Item_Outlet_Sales = predict(xgb_model,test[,-c("Item_Identifier")])
View(submission)
submission$Item_Outlet_Sales = predict(xgb_model,test[,-c("Item_Identifier")])
submission$Item_Outlet_Sales = predict(xgb_model,test])
submission$Item_Outlet_Sales = predict(xgb_model,test)
set.seed(1238)
my_control = trainControl(method = "cv" , number = 5)
tgrid = expand.grid(.mtry = c(3:10),.splitrule = "variance",.min.node.size = c(10,15,20))
random_model = train(x=train[,-c("Item_Identifier","Item_Outlet_Sales")],y=train$Item_Outlet_Sales,
+ method ="ranger",trControl= my_control,tuneGrid=tgrid,num.trees=400,importance="permutation")
random_model = train(x=train[,-c("Item_Identifier","Item_Outlet_Sales")],y=train$Item_Outlet_Sales,
method ="ranger",trControl= my_control,tuneGrid=tgrid,num.trees=400,importance="permutation")
submission$Item_Outlet_Sales = predict(random_model,test[,-c("Item_Identifier")])
write.csv(submission,"D:/BA classes/big market sale predication/random_forest_submit.csv",row.names = F )
View(submission)
